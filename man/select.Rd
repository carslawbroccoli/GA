% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/select.R
\name{select}
\alias{select}
\title{{select()}}
\usage{
select(df, dependent_variable, P, max_iter, method_text, fitness_function_text, mu,
crossover_points, mechanism, random = TRUE, Gap = 1/4, plot.return = FALSE)
}
\arguments{
\item{df}{(data frame) Dataset to fit}

\item{dependent_variable}{(character) Column name of the dependent variable}

\item{P}{(numeric) The number of individuals per generation.}

\item{max_iter}{(numeric) The maximum number of iterations allowed when running GA}

\item{method_text}{(character) "lm" or "glm". methods for fitting the data}

\item{fitness_function_text}{(character) name of the fitness function. AIC, BIC, or user defined function.}

\item{mu}{(numeric) Mutation rate of the allele within a candidate chromosome.}

\item{crossover_points}{(numeric) The number of crossover points during breeding step}

\item{mechanism}{(character) The mechanism to select parents. Selection mechanisms are "rank" or "tournament".}

\item{random}{(logical) Random replacement on or off for parent selection}

\item{Gap}{Generation gap that determines how parents (generation t) are replaced by offspring of the (t+1) generation}

\item{plot.return}{(logical) Boolean for returning plot at end of the algorithm}
}
\description{
This is main call function to run package GA.  This package is comprised of
a main execution file (\emph{select.R} and a R file comtaining all functions
that are necessary for execution (\emph{utils.R}).  The user can enter in a dataset and provide
variables (listed below) to execute the genetic algorithm.
}
\details{
Contained in the list below are the invdividual functions that are called during the
execution of the genetic algorithm.
\itemize{
 \item{init()}: {Initializes the dataframe for the dataset}
 \item{training()}: {fits the method on candidates and return the fitness value of the candidate}
 \item{select_parents()}: {Chooses parents for breeding based off of ranked
 or tournament selection using the fitness values of each parent}
 \item{breed()}: {Breeds parents based off of pairing from select_parents()}
 \item{crossover()}: {Function within breed() to conduct crossover between parent pairs
 during breeding step}
 \item{mutation()}: {Determines if alleles of offspring (t+1 generation) mutates or not}
 \item{get_model()}: {Returns the best fit model of the dataset}
}
}
\examples{
select(mtcars, "mpg")

fake_data <- function(c, n, beta_0, beta, sigma){
# c: number of variables c = 10
# n: total number of observations
X <- matrix(rep(round(runif(c, min = 1, max = 10)),n) + rnorm(c*n, mean = 0, sd = 0.2), nrow = n, byrow = T)
Xnames <- paste0("X", 1:c)
Xdata <- as.data.frame(X)
colnames(Xdata) <- Xnames
Y <- rowSums(t(beta*t(X))) + beta_0 + rnorm(n, mean = 0, sd = sigma)
return(cbind(Xdata, Y))
}

test_data <- fake_data(10, 50, 1,
sample(c(round(runif(10/2, min = 2, max = 10)), rep(0,5)), replace = F), 1)

select(test_data, 15, 100, "lm", "AIC", 0.1, 3, mechanism = "rank",
random = FALSE, Gap = 1/4, plot.return = T)

}
